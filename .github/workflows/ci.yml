name: ci

on:
  push:
    branches: [ main, develop, master, feature/** ]
  pull_request:
    branches: [ main, develop, master ]

jobs:
  nolint-gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run NOLINT gate
        shell: pwsh
        run: ./scripts/nolint-gate.ps1

  build:
    needs: [nolint-gate]
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]

    steps:
      - name: Checkout (push)
        if: github.event_name == 'push'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false
      - name: Checkout (PR head)
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install clang-tidy (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install llvm -y

      - name: Install clang-tidy (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install llvm

      - name: Install clang-tidy (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y clang-tidy

      - name: Configure
        shell: bash
        run: cmake -S . -B build -DZX_ENABLE_TESTS=ON -DZX_BUILD_SHARED=ON
      - name: Build
        shell: bash
        run: cmake --build build --config Release --parallel
      - name: Format check (clang-format)
        shell: bash
        run: |
          if command -v clang-format >/dev/null 2>&1; then
            git ls-files 'core/src/*.{c,cpp}' 'core/include/**/*.{h,hpp}' 'kernels/*.hlsl' | tr '\n' '\0' | xargs -0 -I{} clang-format --dry-run -Werror -style=file {}
          else
            echo 'clang-format not found'; exit 1
          fi

      - name: Lint (clang-tidy)
        shell: bash
        run: |
          clang-tidy --version
          cmake --build build --config Release --target zx
          files=$(git ls-files 'core/src/*.cpp');
          if [[ -n "$files" ]]; then
            clang-tidy -p build $files -- -Icore/include
          fi

      - name: Test
        shell: bash
        run: |
          ctest --test-dir build --output-on-failure -C Release
          ctest --test-dir build --output-on-failure -C Release -R 'determinism_tests|checksum_parity_test'


