---
name: MCP Usage (ziXn)
description: Advanced MCP context passing and thought framework for ziXn; auto-applied with objectives/constraints/acceptance/risks scaffolds, linking, and tags.
alwaysApply: true
---

# MCP Usage: Advanced Context Passing for ziXn

This rule standardizes how we call the FastMCP 2.0 server for ziXn by enforcing a compact context scaffold, explicit thought types/strategies, linking, tags, and validation flags.

## Transport and server

- Server: FastMCP 2.0 (Windows-first)
- Calls must include `self.agent='ziXn-cursor-assistant'` and a stable `session_id` per TODO chain
- Thoughts must be atomic (one objective per call); chain via `builds_on_thoughts`
- Use `response_language='en'`, `request_analysis=true`, `request_validation=true`

## Thought payload template

```json
{
  "self": { "agent": "ziXn-cursor-assistant", "session_id": "<todo-id>" },
  "input": {
    "thought": "<short, action-oriented content>",
    "thought_type": "analysis|evaluation|synthesis|conclusion|question|assumption|counterargument|metacognition",
    "strategy": "systematic|strategic|analytical|critical|integrative",
    "builds_on_thoughts": ["<prior_thought_ids>"],
    "supports_thoughts": ["<ids>"],
    "contradicts_thoughts": ["<ids>"],
    "tags": ["windows", "ci", "tidy", "abi", "tests"],
    "confidence": 4,
    "response_language": "en",
    "request_analysis": true,
    "request_validation": true
  }
}
```

## Context scaffold per call (checklist)

- Objective: exact outcome in 1–2 lines
- Constraints: Windows/MSVC/C++17, Ninja, time budget, determinism
- Acceptance: pass/fail gates (tidy clean, format OK, tests pass, artifacts present)
- Risks & mitigations: top 2–3 (toolchain drift; queue delays; parse errors)
- Evidence: links to GH run URLs, local logs
- Validation: commands, metrics, reproducibility (env + seeds)

## Usage patterns

- Planning (analysis): summarize goal, dependencies, gate criteria
- Tradeoff (evaluation): alternatives with quick pros/cons; select one
- Execution (synthesis): concrete edits/commands to perform next
- Wrap-up (conclusion): results vs acceptance, follow-ups and next actions

## Linking thoughts

- Chain per TODO id via `builds_on_thoughts` (e.g., `ci-fix-apic-arrayview`)
- Use controlled tags: `windows`, `ci`, `tidy`, `abi`, `gpu`, `perf`, `tests`

## Parallelization

- Batch independent analyses in separate thoughts, then synthesize a combined plan referencing those thought IDs

## Examples (Windows CI)

- Tidy fix loop: `analysis` -> choose braces + explicit nullptr checks -> `synthesis` edit lines -> `conclusion` assert tidy/tests green
- Determinism: `analysis` objective; constraints (MSVC C++17); acceptance (byte-identical JSON); risks (timer variance) mitigated by omitting timings when deterministic

## Repro guidance

- Capture exact commands and env vars in each conclusion
- Record GH Actions run URLs and `ctest` invocations used
